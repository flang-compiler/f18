
//
// DECLARE_PARSER_STMT(Name,Class,Group,Text)          
//   - Name is the name in StmtClass enum (typically, that is 'Class' without the 'Stmt' suffix. 
//   - Class is a parser-tree class name.
//   - Group is any StmtGroup value so one of Single, Start, Part, End.
//   - Text is a human readable text describing the statement and usable in
//     a formated error message such as "error in %s statement"
//
// For a given Class, there should be exactly one DECLARE_PARSER_STMT
//
// DECLARE_PARSER_STMT_ALT(Name,Class,Group,Text)   
//   Provide an alternative Name for a given Class.
//   
// DECLARE_DUMMY_STMT(Name,Group,Text)
//   Provide a Name in StmtClass enum that does not correspond to any existing Class. 
//
//
// The default implementation for those macros is to call DECLARE_STMT(Name,Class,Group,Text)
// 
//

#ifndef DECLARE_PARSER_STMT
#define DECLARE_PARSER_STMT(Name,Class,Group,Text) DECLARE_STMT(Name,Class,Group,Text)
#endif

#ifndef DECLARE_PARSER_STMT_ALT
#define DECLARE_PARSER_STMT_ALT(Name,Class,Group,Text) DECLARE_STMT(Name,Class,Group,Text)
#endif

#ifndef DECLARE_DUMMY_STMT
#define DECLARE_DUMMY_STMT(Name,Group,Text) DECLARE_STMT(Name,void,Group,Text) 
#endif

// DECLARE_FIRST_STMT is a special alias for the first occurence of DECLARE_PARSER_STMT.
#ifndef DECLARE_FIRST_STMT
#define DECLARE_FIRST_STMT(Name,Class,Group,Text) DECLARE_PARSER_STMT(Name,Class,Group,Text) 
#endif

DECLARE_FIRST_STMT( Access               , AccessStmt               , Single    , "PUBLIC or PRIVATE" )
DECLARE_PARSER_STMT(Allocatable          , AllocatableStmt          , Single    , "ALLOCATABLE" )
DECLARE_PARSER_STMT(Allocate             , AllocateStmt             , Single    , "ALLOCATE" )
DECLARE_PARSER_STMT(ArithmeticIf         , ArithmeticIfStmt         , Single    , "arithmetic IF" )
DECLARE_PARSER_STMT(Assign               , AssignStmt               , Single    , "ASSIGN TO" )
DECLARE_PARSER_STMT(AssignedGoto         , AssignedGotoStmt         , Single    , "assigned GOTO" )
DECLARE_PARSER_STMT(Assignment           , AssignmentStmt           , Single    , "assignment" )
DECLARE_PARSER_STMT(Associate            , AssociateStmt            , Start     , "ASSOCIATE" )
DECLARE_PARSER_STMT(Asynchronous         , AsynchronousStmt         , Single    , "ASYNCHRONOUS" )
DECLARE_PARSER_STMT(Backspace            , BackspaceStmt            , Single    , "BACKSPACE" )
DECLARE_PARSER_STMT(BasedPointer         , BasedPointerStmt         , Single    , "Based Pointer" )
DECLARE_PARSER_STMT(Bind                 , BindStmt                 , Single    , "BIND" )
DECLARE_PARSER_STMT(Block                , BlockStmt                , Start     , "BLOCK" )
DECLARE_PARSER_STMT(Call                 , CallStmt                 , Single    , "CALL" )
DECLARE_PARSER_STMT(Case                 , CaseStmt                 , Part      , "CASE" )
DECLARE_PARSER_STMT(ChangeTeam           , ChangeTeamStmt           , Start     , "CHANGE TEAM" )
DECLARE_PARSER_STMT(Close                , CloseStmt                , Single    , "CLOSE" )
DECLARE_PARSER_STMT(Codimension          , CodimensionStmt          , Single    , "CODIMENSION" )
DECLARE_PARSER_STMT(Common               , CommonStmt               , Single    , "COMMON" )
DECLARE_PARSER_STMT(ComputedGoto         , ComputedGotoStmt         , Single    , "computed GOTO" )
DECLARE_PARSER_STMT(ComponentDef         , ComponentDefStmt         , Single    , "component declaration" )
DECLARE_PARSER_STMT(Contains             , ContainsStmt             , Part      , "CONTAINS" )
DECLARE_PARSER_STMT(Contiguous           , ContiguousStmt           , Single    , "CONTIGUOUS" )
DECLARE_PARSER_STMT(Continue             , ContinueStmt             , Single    , "CONTINUE" )
DECLARE_PARSER_STMT(Critical             , CriticalStmt             , Start     , "CRITICAL" )
DECLARE_PARSER_STMT(Cycle                , CycleStmt                , Single    , "CYCLE" )
DECLARE_PARSER_STMT(Data                 , DataStmt                 , Single    , "DATA" )
DECLARE_PARSER_STMT(Deallocate           , DeallocateStmt           , Single    , "DEALLOCATE" )
DECLARE_PARSER_STMT(DerivedType          , DerivedTypeStmt          , Start     , "TYPE declaration" )
DECLARE_PARSER_STMT(Dimension            , DimensionStmt            , Single    , "DIMENSION" )
DECLARE_PARSER_STMT(Else                 , ElseStmt                 , Part      , "ELSE" )
DECLARE_PARSER_STMT(ElseIf               , ElseIfStmt               , Part      , "ELSE IF" )
DECLARE_PARSER_STMT(ElseWhere            , ElseWhereStmt            , Part      , "ELSE WHERE" )
DECLARE_PARSER_STMT(EndAssociate         , EndAssociateStmt         , End       , "END ASSOCIATE" )
DECLARE_PARSER_STMT(EndBlock             , EndBlockStmt             , End       , "END BLOCK" )
DECLARE_PARSER_STMT(EndChangeTeam        , EndChangeTeamStmt        , End       , "END TEAM" )
DECLARE_PARSER_STMT(EndCritical          , EndCriticalStmt          , End       , "END CRITICAL" )
DECLARE_PARSER_STMT(EndDo                , EndDoStmt                , End       , "END DO" )
DECLARE_PARSER_STMT(EndEnum              , EndEnumStmt              , End       , "END ENUM" )
DECLARE_PARSER_STMT(EndForall            , EndForallStmt            , End       , "END FORALL" )
DECLARE_PARSER_STMT(EndFunction          , EndFunctionStmt          , End       , "END FUNCTION" )
DECLARE_PARSER_STMT(EndIf                , EndIfStmt                , End       , "END IF" )
DECLARE_PARSER_STMT(EndInterface         , EndInterfaceStmt         , End       , "END INTERFACE" )
DECLARE_PARSER_STMT(EndModule            , EndModuleStmt            , End       , "END MODULE" )
DECLARE_PARSER_STMT(EndProgram           , EndProgramStmt           , End       , "END PROGRAM" )
DECLARE_PARSER_STMT(EndSelect            , EndSelectStmt            , End       , "END SELECT" )
DECLARE_PARSER_STMT(EndStructure         , EndStructureStmt         , End       , "END STRUCTURE?" )
DECLARE_PARSER_STMT(EndSubroutine        , EndSubroutineStmt        , End       , "END SUBROUTINE" )
DECLARE_PARSER_STMT(EndType              , EndTypeStmt              , End       , "END TYPE" )
DECLARE_PARSER_STMT(EndWhere             , EndWhereStmt             , End       , "END WHERE" )
DECLARE_PARSER_STMT(Endfile              , EndfileStmt              , Single    , "ENDFILE" )
DECLARE_PARSER_STMT(Entry                , EntryStmt                , Single    , "ENTRY" )
DECLARE_PARSER_STMT(EnumDef              , EnumDefStmt              , Start     , "ENUM" )
DECLARE_PARSER_STMT(EnumeratorDef        , EnumeratorDefStmt        , Single    , "ENUMERATOR" )
DECLARE_PARSER_STMT(Equivalence          , EquivalenceStmt          , Single    , "EQUIVALENCE" )
DECLARE_PARSER_STMT(EventPost            , EventPostStmt            , Single    , "EVENT POST" )
DECLARE_PARSER_STMT(EventWait            , EventWaitStmt            , Single    , "EVENT WAIT" )
DECLARE_PARSER_STMT(Exit                 , ExitStmt                 , Single    , "EXIT" )
DECLARE_PARSER_STMT(External             , ExternalStmt             , Single    , "EXTERNAL" )
DECLARE_PARSER_STMT(FailImage            , FailImageStmt            , Single    , "FAIL IMAGE" )
DECLARE_PARSER_STMT(FinalProcedure       , FinalProcedureStmt       , Single    , "FINAL PROCEDURE" )
DECLARE_PARSER_STMT(Flush                , FlushStmt                , Single    , "FLUSH" )
DECLARE_PARSER_STMT(Forall               , ForallStmt               , Start     , "FORALL" )
DECLARE_PARSER_STMT(ForallAssignment     , ForallAssignmentStmt     , Single    , "FORALL Assignment" )
DECLARE_PARSER_STMT(ForallConstruct      , ForallConstructStmt      , Start     , "FORALL Construct" )
DECLARE_PARSER_STMT(FormTeam             , FormTeamStmt             , Single    , "FORM TEAM" )
DECLARE_PARSER_STMT(Format               , FormatStmt               , Single    , "FORMAT" )
DECLARE_PARSER_STMT(Function             , FunctionStmt             , Start     , "FUNCTION" )
DECLARE_PARSER_STMT(Generic              , GenericStmt              , Single    , "GENERIC" )
DECLARE_PARSER_STMT(Goto                 , GotoStmt                 , Single    , "GOTO" )
DECLARE_PARSER_STMT(If                   , IfStmt                   , Start     , "IF" )
DECLARE_PARSER_STMT(IfThen               , IfThenStmt               , Start     , "IF THEN" )
DECLARE_PARSER_STMT(Implicit             , ImplicitStmt             , Single    , "IMPLICIT" )
DECLARE_PARSER_STMT(Import               , ImportStmt               , Single    , "IMPORT" )
DECLARE_PARSER_STMT(Inquire              , InquireStmt              , Single    , "INQUIRE" )
DECLARE_PARSER_STMT(Intent               , IntentStmt               , Single    , "INTENT" )
DECLARE_PARSER_STMT(Interface            , InterfaceStmt            , Start     , "INTERFACE" )
DECLARE_PARSER_STMT(Intrinsic            , IntrinsicStmt            , Single    , "INTRINSIC" )
DECLARE_PARSER_STMT(LabelDo              , LabelDoStmtStmt          , Start     , "label-DO " )
DECLARE_PARSER_STMT(Lock                 , LockStmt                 , Single    , "LOCK" )
DECLARE_PARSER_STMT(MaskedElsewhere      , MaskedElsewhereStmt      , Part      , "masked ELSE WHERE" )
DECLARE_PARSER_STMT(Module               , ModuleStmt               , Start     , "MODULE" )
DECLARE_PARSER_STMT(Namelist             , NamelistStmt             , Single    , "NAMELIST" )
DECLARE_PARSER_STMT(NonLabelDo           , NonLabelDoStmtStmt       , Start     , "DO" )
DECLARE_PARSER_STMT(Nullify              , NullifyStmt              , Single    , "NULLIFY" )
DECLARE_PARSER_STMT(Open                 , OpenStmt                 , Single    , "OPEN" )
DECLARE_PARSER_STMT(Optional             , OptionalStmt             , Single    , "OPTIONAL" )
DECLARE_PARSER_STMT(Parameter            , ParameterStmt            , Single    , "PARAMETER" )
DECLARE_PARSER_STMT(Pause                , PauseStmt                , Single    , "PAUSE" )
DECLARE_PARSER_STMT(Pointer              , PointerStmt              , Single    , "POINTER" )
DECLARE_PARSER_STMT(PointerAssignment    , PointerAssignmentStmt    , Single    , "pointer assignment" )
DECLARE_PARSER_STMT(Print                , PrintStmt                , Single    , "PRINT" )
// PrivateStmt is only used in TYPE definitions
DECLARE_PARSER_STMT(Private              , PrivateStmt              , Single    , "PRIVATE" )
DECLARE_PARSER_STMT(ProcedureDeclaration , ProcedureDeclarationStmt , Single    , "PROCEDURE" )
DECLARE_PARSER_STMT(Program              , ProgramStmt              , Start     , "PROGRAM" )
DECLARE_PARSER_STMT(Protected            , ProtectedStmt            , Single    , "PROTECTED" )
DECLARE_PARSER_STMT(Read                 , ReadStmt                 , Single    , "READ" )
DECLARE_PARSER_STMT(Redimension          , RedimensionStmt          , Single    , "REDIMENSION" )
DECLARE_PARSER_STMT(Return               , ReturnStmt               , Single    , "RETURN" )
DECLARE_PARSER_STMT(Rewind               , RewindStmt               , Single    , "REWIND" )
DECLARE_PARSER_STMT(Save                 , SaveStmt                 , Single    , "SAVE" )
DECLARE_PARSER_STMT(SelectCase           , SelectCaseStmt           , Start     , "SELECT CASE" )
DECLARE_PARSER_STMT(SelectRank           , SelectRankStmt           , Start     , "SELECT RANK" )
DECLARE_PARSER_STMT(SelectRankCase       , SelectRankCaseStmt       , Part      , "RANK" )
DECLARE_PARSER_STMT(SelectType           , SelectTypeStmt           , Start     , "SELECT TYPE" )
DECLARE_PARSER_STMT(Subroutine           , SubroutineStmt           , Start     , "SUBROUTINE" )
DECLARE_PARSER_STMT(StmtFunction         , StmtFunctionStmt         , Single    , "statement-function" )
DECLARE_PARSER_STMT(Stop                 , StopStmt                 , Single    , "STOP" )
DECLARE_PARSER_STMT(Structure            , StructureStmt            , Start     , "STRUCTURE" )
DECLARE_PARSER_STMT(SyncAll              , SyncAllStmt              , Single    , "SYNC ALL" )
DECLARE_PARSER_STMT(SyncImages           , SyncImagesStmt           , Single    , "SYNC IMAGES" )
DECLARE_PARSER_STMT(SyncMemory           , SyncMemoryStmt           , Single    , "SYNC MEMORY" )
DECLARE_PARSER_STMT(SyncTeam             , SyncTeamStmt             , Single    , "SYNC TEAM" )
DECLARE_PARSER_STMT(Target               , TargetStmt               , Single    , "TARGET" )
DECLARE_PARSER_STMT(TypeBoundGeneric     , TypeBoundGenericStmt     , Single    , "type bound GENERIC" )
DECLARE_PARSER_STMT(TypeBoundProcedure   , TypeBoundProcedureStmt   , Single    , "type bound PROCEDURE" )
DECLARE_PARSER_STMT(TypeDeclaration      , TypeDeclarationStmt      , Single    , "declaration" )
DECLARE_PARSER_STMT(TypeGuard            , TypeGuardStmt            , Part      , "TYPE IS" ) // See 
DECLARE_PARSER_STMT(Unlock               , UnlockStmt               , Single    , "UNLOCK" )
DECLARE_PARSER_STMT(Use                  , UseStmt                  , Single    , "USE" )
DECLARE_PARSER_STMT(Value                , ValueStmt                , Single    , "VALUE" )
DECLARE_PARSER_STMT(Volatile             , VolatileStmt             , Single    , "VOLATILE" )
DECLARE_PARSER_STMT(Wait                 , WaitStmt                 , Single    , "WAIT" )
DECLARE_PARSER_STMT(Where                , WhereStmt                , Start     , "WHERE" )
DECLARE_PARSER_STMT(WhereConstruct       , WhereConstructStmt       , Start     , "WHERE construct" )
DECLARE_PARSER_STMT(Write                , WriteStmt                , Single    , "WRITE" )


DECLARE_PARSER_STMT_ALT(CaseDefault      , CaseStmt                 , Part      , "CASE" )
DECLARE_PARSER_STMT_ALT(ClassDefault     , TypeGuardStmt            , Part      , "CLASS DEFAULT" )
DECLARE_PARSER_STMT_ALT(ClassGuard       , TypeGuardStmt            , Part      , "CLASS IS" )
DECLARE_PARSER_STMT_ALT(SelectRankStar   , SelectRankCaseStmt       , Part      , "RANK(*)" )
DECLARE_PARSER_STMT_ALT(SelectRankDefault, SelectRankCaseStmt       , Part      , "RANK DEFAULT" )
DECLARE_PARSER_STMT_ALT(PublicAccess     , AccessStmt               , Single    , "default PUBLIC" )
DECLARE_PARSER_STMT_ALT(PrivateAccess    , AccessStmt               , Single    , "default PRIVATE" )
DECLARE_PARSER_STMT_ALT(LabelDoWhile     , LabelDoStmt              , Start     , "label-DO WHILE" )
DECLARE_PARSER_STMT_ALT(LabelDoConcurrent, LabelDoStmt              , Start     , "label-DO CONCURRENT" )
DECLARE_PARSER_STMT_ALT(NonLabelDoWhile  , NonLabelDoStmt           , Start     , "DO " )
DECLARE_PARSER_STMT_ALT(NonLabelDoConcurrent, NonLabelDoConcurrent  , Start     , "DO CONCURRENT" )

// DummyEnd is used to provide an end to constructs that lack an explicit end statement after their body.
DECLARE_DUMMY_STMT(DummyEndIf                                       , End       , "<DummyEndIf>" )
DECLARE_DUMMY_STMT(DummyEndForall                                   , End       , "<DummyEndForall>" )
DECLARE_DUMMY_STMT(DummyEndWhere                                    , End       , "<DummyEndWhere>" )
DECLARE_DUMMY_STMT(DummyEndDo                                       , End       , "<DummyEndDo>" )

#undef DECLARE_PARSER_STMT
#undef DECLARE_PARSER_STMT_ALT
#undef DECLARE_DUMMY_STMT
#undef DECLARE_FIRST_STMT
#undef DECLARE_STMT
